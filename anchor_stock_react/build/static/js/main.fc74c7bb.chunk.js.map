{"version":3,"sources":["actions/actions.js","components/accountScreen.js","components/portfolioScreen.js","components/transactionScreen.js","containers/bodyBox.js","components/navButtons.js","containers/navBox.js","App.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["getStockBuyFetch","data","dispatch","getState","stockData","userId","currentUser","id","fetch","method","headers","body","JSON","stringify","then","resp","json","errors","alert","addStockToUser","newStock","newUserMoneyAmount","userData","money_amount","getStockBatchFetch","stocks","i","length","undefined","symbol","amount","batchFetch","Object","keys","join","process","Promise","all","stockReducerData","portfolioPrice","latestPrice","entries","quote","openPrice","open","stockSymbol","totalPrice","Math","round","toFixed","stockAmount","stockColor","parseFloat","stockTextColor","fillPortfolioStocks","portfolioStocks","loginUser","type","payload","AccountScreen","state","username","email","password","currAccView","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","document","getElementById","props","userLoginFetch","userCreateFetch","handleClick","className","this","onSubmit","placeholder","onChange","onClick","React","PureComponent","connect","user","PortfolioScreen","componentDidMount","startStockInterval","componentDidUpdate","prevProps","stockInterval","componentWillUnmount","clearInterval","symbolSearch","symbolAmount","setInterval","getStockFetch","renderPortfolio","values","map","item","idx","key","ok","status","stockPrice","catch","console","log","TransactionScreen","price","BodyBox","bodyView","Component","NavButtons","handleScreenSwitch","NavBox","App","initialState","Boolean","window","location","hostname","match","store","createStore","action","compose","applyMiddleware","thunk","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RA4EaA,EAAmB,SAAAC,GAC9B,OAAO,SAACC,EAAUC,GAChB,IAAMC,EAAS,eAAOH,EAAP,CAAaI,OAAQF,IAAWG,YAAYC,KAC3D,OAAOC,MAAM,oDAAqD,CAChEC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,OAAU,oBAEZC,KAAMC,KAAKC,UAAUT,KAEpBU,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAb,GACAA,EAAKgB,OACPC,MAAMjB,EAAKgB,SAEXf,EAASiB,EAAe,CAACC,SAAUnB,EAAKmB,SAAUC,mBAAoBpB,EAAKqB,SAASC,gBACpFrB,EAASsB,EAAmBvB,EAAKqB,SAASG,eAMvCD,EAAqB,SAAAvB,GAChC,OAAO,SAACC,GAGN,IAFA,IAAIE,EAAY,GAEPsB,EAAI,EAAGA,EAAIzB,EAAK0B,OAAQD,SACGE,IAA9BxB,EAAUH,EAAKyB,GAAGG,QACpBzB,EAAUH,EAAKyB,GAAGG,QAAU5B,EAAKyB,GAAGI,OAEpC1B,EAAUH,EAAKyB,GAAGG,SAAW5B,EAAKyB,GAAGI,OAIzC,IAAMC,EAAaC,OAAOC,KAAK7B,GAAW8B,KAAK,KAE/C,OAAO1B,MAAM,+DAAD,OAAgEuB,EAAhE,8BAAgGI,uCAAiC,CAC3I1B,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,OAAU,sBAGXI,MAAK,SAAAC,GAAI,OAAIqB,QAAQC,IAAI,CAACtB,EAAKC,OAAOZ,OACtCU,MAAK,SAAAb,GAIJ,IAHA,IAAIqC,EAAmB,GACnBC,EAAiB,EAEZb,EAAI,EAAGA,EAAKM,OAAOC,KAAKhC,EAAK,IAAI0B,OAASD,IAAK,CACtD,IAAMc,EAAcR,OAAOS,QAAQxC,EAAK,IAAIyB,GAAG,GAAGgB,MAAMF,YAClDG,EAAYX,OAAOS,QAAQxC,EAAK,IAAIyB,GAAG,GAAGgB,MAAME,KAChDC,EAAcb,OAAOS,QAAQxC,EAAK,IAAIyB,GAAG,GACzCoB,GAAcC,KAAKC,MAAOhB,OAAOS,QAAQxC,EAAK,IAAIyB,GAAG,GAAGgB,MAAMF,YAAcR,OAAOS,QAAQrC,GAAWsB,GAAG,GAAI,KAAK,KAAKuB,QAAQ,GAC/HC,EAAclB,OAAOS,QAAQrC,GAAWsB,GAAG,GAC7CyB,EAAa,GAEjBZ,GAAkBa,WAAWN,GAG3BK,EADEX,EAAcG,EACH,YACJH,EAAcG,EACV,UAEA,WAGfL,EAAiBZ,GAAK,CAACG,OAAQgB,EAAaC,WAAYA,EAAYhB,OAAQoB,EAAaG,eAAgBF,GAG3GjD,EAASoD,EAAoB,CAACC,gBAAiBjB,EAAkBC,gBAAiBQ,KAAKC,MAAqB,IAAfT,GAAoB,KAAKU,QAAQ,WAKzHO,EAAY,SAAAvD,GAAI,MAAK,CAChCwD,KAAM,aACNC,QAASzD,IAGEqD,EAAsB,SAAArD,GAAI,MAAK,CAC1CwD,KAAM,wBACNC,QAASzD,IAGEkB,EAAiB,SAAAlB,GAAI,MAAK,CACrCwD,KAAM,oBACNC,QAASzD,IC/JL0D,E,2MACJC,MAAQ,CACNC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,YAAa,Y,EAGfC,aAAe,SAAAC,GACb,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAItCC,aAAe,SAAAL,GACbA,EAAMM,iBACN,IACIvE,EAAO,GACS,wBAFAwE,SAASC,eAAe,kBAAkBJ,OAG5DrE,EAAO,CACL6D,MAAO,EAAKF,MAAME,MAClBC,SAAU,EAAKH,MAAMG,UAEvB,EAAKY,MAAMC,eAAe3E,KAE1BA,EAAO,CACL4D,SAAU,EAAKD,MAAMC,SACrBC,MAAO,EAAKF,MAAME,MAClBC,SAAU,EAAKH,MAAMG,UAEvB,EAAKY,MAAME,gBAAgB5E,K,EAI/B6E,YAAc,WACmB,cAA3B,EAAKlB,MAAMI,YACb,EAAKG,SAAS,CACZH,YAAa,aAGf,EAAKG,SAAS,CACZH,YAAa,e,wEAMjB,OACE,yBAAKe,UAAU,2CACe,cAA3BC,KAAKpB,MAAMI,YACZ,uCAEA,oCACA,0BAAMe,UAAU,eAAexE,GAAG,cAAc0E,SAAUD,KAAKT,cACnC,cAA3BS,KAAKpB,MAAMI,YACZ,6BACE,6CACA,2BAAOP,KAAK,OAAOY,KAAK,WAAWa,YAAY,WAAWC,SAAUH,KAAKf,gBAG3E,KACA,6BACE,0CACA,2BAAOR,KAAK,QAAQY,KAAK,QAAQa,YAAY,QAAQC,SAAUH,KAAKf,gBAEtE,6BACE,6CACA,2BAAOR,KAAK,WAAWY,KAAK,WAAWa,YAAY,WAAWC,SAAUH,KAAKf,gBAE/E,6BACE,2BAAOR,KAAK,SAASY,KAAK,SAASC,MAAM,WACzC,2BAAOb,KAAK,SAASY,KAAK,SAASC,MAAkC,cAA3BU,KAAKpB,MAAMI,YAA8B,oBAAsB,sBAAuBzD,GAAG,iBAAiB6E,QAASJ,KAAKF,qB,GAvEhJO,IAAMC,eAoFnBC,cAAQ,MALI,SAAArF,GAAQ,MAAK,CACtC2E,gBAAiB,SAAA5E,GAAI,OAAIC,ED5DI,SAAAD,GAC7B,OAAO,SAAAC,GACL,OAAOM,MAAM,iDAAkD,CAC7DC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,OAAU,oBAEZC,KAAMC,KAAKC,UAAUZ,KAEpBa,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAb,GACAA,EAAKgB,OAIPC,MAAMjB,EAAKgB,QAEXf,EAASsD,EAAUvD,EAAKuF,WC0CEX,CAAgB5E,KAClD2E,eAAgB,SAAA3E,GAAI,OAAIC,EDrFI,SAAAD,GAC5B,OAAO,SAAAC,GACL,OAAOM,MAAM,iDAAkD,CAC7DC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,OAAU,oBAEZC,KAAMC,KAAKC,UAAUZ,KAEpBa,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAb,GACAA,EAAKgB,OAIPC,MAAMjB,EAAKgB,QAEXf,EAASsD,EAAUvD,EAAKuF,WCmECZ,CAAe3E,QAGnCsF,CAAiC5B,GCpF1C8B,E,2MAEJC,kBAAoB,WACd,EAAKf,MAAMrE,YAAYmB,OAAOE,OAAS,IACzC,EAAKgD,MAAMnD,mBAAmB,EAAKmD,MAAMrE,YAAYmB,QACrD,EAAKkE,uB,EAITC,mBAAqB,SAACC,GAChBA,EAAUvF,YAAYmB,OAAOE,OAAS,QAA4BC,IAAvB,EAAKkE,eAClD,EAAKH,sB,EAITI,qBAAuB,WACrBC,cAAc,EAAKF,gB,EAIrBlC,MAAQ,CACNqC,aAAc,GACdC,aAAc,G,EAGhBP,mBAAqB,WACnB,OAAO,EAAKG,cAAgBK,aAAY,kBAAM,EAAKxB,MAAMnD,mBAAmB,EAAKmD,MAAMrE,YAAYmB,UAAS,O,EAG9GwC,aAAe,SAAAC,GACb,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAItCC,aAAe,SAAAL,GAEb,GADAA,EAAMM,iBACyB,IAA5B,EAAKZ,MAAMsC,cAAsB,EAAKtC,MAAMsC,cAAgB,EAC7DhF,MAAM,4CACD,CACL,IAAMjB,EAAI,eAAO,EAAK2D,OAEtB,EAAKe,MAAMyB,cAAcnG,K,EAI7BoG,gBAAkB,SAAC9C,GACjB,OAAOvB,OAAOsE,OAAO/C,GAAiBgD,KAAI,SAACC,EAAKC,GAC9C,OAAO,wBAAIC,IAAKD,GACP,4BAAI,0BAAM1B,UAAWyB,EAAKnD,gBAAiBmD,EAAK3E,QAAhD,MAAkE2E,EAAK1E,OAAvE,WACA,wBAAIiD,UAAWyB,EAAKnD,gBAApB,IAAsCmD,EAAK1D,iB,wEAOtD,OACE,yBAAKiC,UAAU,kBACb,yBAAKA,UAAU,+BAC6B,IAAzCC,KAAKL,MAAMrE,YAAYmB,OAAOE,OAC7B,sDAEF,6BACE,+BACE,8CAAoBqD,KAAKL,MAAMpC,eAA/B,KACA,+BACsD,IAAnDP,OAAOC,KAAK+C,KAAKL,MAAMpB,iBAAiB5B,OAAe,KAAOqD,KAAKqB,gBAAgBrB,KAAKL,MAAMpB,qBAKvG,yBAAKwB,UAAU,gCACb,qCAAWC,KAAKL,MAAMrE,YAAYiB,aAAa0B,QAAQ,IACvD,0BAAMgC,SAAUD,KAAKT,cACnB,6BACE,2CACA,2BAAOd,KAAK,OAAOY,KAAK,eAAea,YAAY,SAASC,SAAUH,KAAKf,gBAE7E,6BACE,wCACA,2BAAOR,KAAK,SAASY,KAAK,eAAea,YAAY,MAAMC,SAAUH,KAAKf,gBAE5E,2BAAOR,KAAK,SAASY,KAAK,SAASC,MAAM,e,GAnFvBe,IAAMC,eAsGrBC,eAXS,SAAA3B,GAAK,MAAK,CAChCtD,YAAasD,EAAMtD,YACnBiD,gBAAiBK,EAAML,gBACvBhB,eAAgBqB,EAAMrB,mBAGG,SAAArC,GAAQ,MAAK,CACtCkG,cAAe,SAAAnG,GAAI,OAAIC,EFtDI,SAAAD,GAC3B,OAAO,SAAAC,GACL,OAAOM,MAAM,0CAAD,OAA2CP,EAAKgG,aAAhD,wBAA4E9D,uCAAiC,CACvH1B,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,OAAU,sBAGXI,MAAK,SAAAC,GACJ,OAAgB,IAAZA,EAAK4F,GACa,MAAhB5F,EAAK6F,OACA1F,MAAM,2BAERA,MAAM,SAENkB,QAAQC,IAAI,CAACtB,EAAKC,OAAOf,OAGnCa,MAAK,SAAAb,GACJC,EAASF,EAAiB,CAAC6G,WAAY5G,EAAK,GAAGuC,YAAaK,YAAa5C,EAAK,GAAG4B,OAAQqB,YAAajD,EAAK,GAAGiG,mBAE/GY,OAAM,WACLC,QAAQC,IAAI,aE+BcZ,CAAcnG,KAC9CuB,mBAAoB,SAAAvB,GAAI,OAAIC,EAASsB,EAAmBvB,QAG3CsF,CAA4CE,GCvGrDwB,E,iLAGF,OACE,yBAAKlC,UAAU,+BAC6B,IAAzCC,KAAKL,MAAMrE,YAAYmB,OAAOE,OAC7B,sDAEF,+BACA,+CACE,+BACGqD,KAAKL,MAAMrE,YAAYmB,OAAO8E,KAAI,SAACC,EAAKC,GACvC,OAAO,wBAAIC,IAAKD,GACP,oCAAUD,EAAK3E,OAAf,OAA2B2E,EAAK1E,OAAhC,cAAmD0E,EAAKU,kB,GAb/C7B,IAAMC,eA2BvBC,eAJS,SAAA3B,GAAK,MAAK,CAChCtD,YAAasD,EAAMtD,eAGkB,KAAxBiF,CAA8B0B,GCxBvCE,E,iLAEF,OAAQnC,KAAKL,MAAMyC,UACjB,IAAK,YACH,OAAO,kBAAC,EAAD,MACT,IAAK,eACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAO,kBAAC,EAAD,W,GAROC,aAiBP9B,eAJS,SAAA3B,GAAK,MAAK,CAChCwD,SAAUxD,EAAMwD,YAGqB,KAAxB7B,CAA8B4B,GCnBvCG,E,2MAEJxC,YAAc,SAAAZ,GACc,cAAtBA,EAAME,OAAOC,MAAwBH,EAAME,OAAOC,OAAS,EAAKM,MAAMyC,SACxE,EAAKzC,MAAM4C,mBAAmB,aACC,iBAAtBrD,EAAME,OAAOC,MAA2BH,EAAME,OAAOC,OAAS,EAAKM,MAAMyC,UAClF,EAAKzC,MAAM4C,mBAAmB,iB,wEAKhC,OACE,yBAAKxC,UAAU,iBACb,4BAAQtB,KAAK,SAASY,KAAK,YAAYe,QAASJ,KAAKF,aAArD,aACA,4BAAQrB,KAAK,SAASY,KAAK,eAAee,QAASJ,KAAKF,aAAxD,qB,GAdiBO,IAAMC,eA4BhBC,eARS,SAAA3B,GAAK,MAAK,CAChCwD,SAAUxD,EAAMwD,aAGS,SAAAlH,GAAQ,MAAK,CACtCqH,mBAAoB,SAAAtH,GAAI,OAAIC,ELyII,SAAAD,GAAI,MAAK,CACzCwD,KAAK,uBACLC,QAASzD,GK3I4BsH,CAAmBtH,QAG3CsF,CAA4C+B,GCpB3CE,E,iLANZ,OACE,kBAAC,EAAD,U,GAJeH,aCEfI,E,iLAEF,OACE,6BACkD,IAA/CzF,OAAOC,KAAK+C,KAAKL,MAAMrE,aAAaqB,OAAe,KAAO,kBAAC,EAAD,MAC3D,kBAAC,EAAD,W,GALU0F,aAeH9B,eAJS,SAAA3B,GAAK,MAAK,CAChCtD,YAAasD,EAAMtD,eAGkB,KAAxBiF,CAA8BkC,G,gBCpBvCC,EAAe,CACnBpH,YAAa,GACb8G,SAAU,UACV7D,gBAAiB,GACjBhB,eAAgB,GCQEoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRAC,EAAQC,aFHC,WAAgD,IAA/BrE,EAA8B,uDAAtB8D,EAAcQ,EAAQ,uCAC1D,OAAQA,EAAOzE,MACb,IAAK,aACH,OAAO,eAAIG,EAAX,CAAkBtD,YAAa4H,EAAOxE,QAAS0D,SAAU,cAC3D,IAAK,wBACH,OAAO,eAAIxD,EAAX,GAAqBsE,EAAOxE,SAC9B,IAAK,oBACH,OAAO,eAAIE,EAAX,CACQtD,YAAY,eACPsD,EAAMtD,YADA,CAETiB,aAAc2G,EAAOxE,QAAQrC,mBAC7BI,OAAO,GAAD,mBACDmC,EAAMtD,YAAYmB,QADjB,CAEJyG,EAAOxE,QAAQtC,eAG7B,IAAK,uBACD,OAAO,eAAIwC,EAAX,CAAkBwD,SAAUc,EAAOxE,UACvC,QACE,OAAOE,KEhBoBuE,YAC3BC,YAAgBC,OAGxBC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,OAEDvD,SAASC,eAAe,SDiHrB,kBAAmB8D,WACrBA,UAAUC,cAAcC,MAAM5H,MAAK,SAAA6H,GACjCA,EAAaC,kB","file":"static/js/main.fc74c7bb.chunk.js","sourcesContent":["export const userLoginFetch = data => {\n  return dispatch => {\n    return fetch(\"frozen-ravine-06122.herokuapp.com/api/v1/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify(data)\n    })\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.errors) {\n          // Here you should have logic to handle invalid login credentials.\n          // This assumes your Rails API will return a JSON object with a key of\n          // 'message' if there is an error\n          alert(data.errors)\n        } else {\n          dispatch(loginUser(data.user))\n        }\n      })\n  }\n}\n\nexport const userCreateFetch = data => {\n  return dispatch => {\n    return fetch(\"frozen-ravine-06122.herokuapp.com/api/v1/users\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.errors) {\n          // Here you should have logic to handle invalid creation of a user.\n          // This assumes your Rails API will return a JSON object with a key of\n          // 'message' if there is an error with creating the user, i.e. invalid username\n          alert(data.errors)\n        } else {\n          dispatch(loginUser(data.user))\n        }\n      })\n  }\n}\n\nexport const getStockFetch = data => {\n  return dispatch => {\n    return fetch(`https://cloud.iexapis.com/stable/stock/${data.symbolSearch}/quote?token=${process.env.REACT_APP_API_KEY}`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    })\n      .then(resp => {\n        if (resp.ok === false) {\n          if (resp.status === 404) {\n            return alert(\"Stock symbol not valid.\")\n          }\n          return alert(\"Error\")\n        } else {\n          return Promise.all([resp.json(),data])\n        }\n      })\n      .then(data => {\n        dispatch(getStockBuyFetch({stockPrice: data[0].latestPrice, stockSymbol: data[0].symbol, stockAmount: data[1].symbolAmount}))\n      })\n      .catch(() => {\n        console.log(\"Error\")\n      })\n  }\n}\n\nexport const getStockBuyFetch = data => {\n  return (dispatch, getState) => {\n    const stockData = {...data, userId: getState().currentUser.id}\n    return fetch(\"frozen-ravine-06122.herokuapp.com/api/v1/buyStock\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(stockData)\n    })\n      .then(resp => resp.json())\n      .then(data => {\n        if (data.errors){\n          alert(data.errors)\n        } else {\n          dispatch(addStockToUser({newStock: data.newStock, newUserMoneyAmount: data.userData.money_amount}))\n          dispatch(getStockBatchFetch(data.userData.stocks))\n        }\n      })\n  }\n}\n\nexport const getStockBatchFetch = data => {\n  return (dispatch) => {\n    let stockData = {}\n\n    for (let i = 0; i < data.length; i++) {\n      if (stockData[data[i].symbol] === undefined) {\n        stockData[data[i].symbol] = data[i].amount\n      } else {\n        stockData[data[i].symbol] += data[i].amount\n      }\n    }\n\n    const batchFetch = Object.keys(stockData).join(\",\")\n\n    return fetch(`https://cloud.iexapis.com/stable/stock/market/batch?symbols=${batchFetch}&types=quote&token=${process.env.REACT_APP_API_KEY}`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    })\n      .then(resp => Promise.all([resp.json(),stockData]))\n      .then(data => {\n        let stockReducerData = {}\n        let portfolioPrice = 0\n\n        for (let i = 0; i < (Object.keys(data[0]).length); i++) {\n          const latestPrice = Object.entries(data[0])[i][1].quote.latestPrice\n          const openPrice = Object.entries(data[0])[i][1].quote.open\n          const stockSymbol = Object.entries(data[0])[i][0]\n          const totalPrice = (Math.round((Object.entries(data[0])[i][1].quote.latestPrice * Object.entries(stockData)[i][1])*100)/100).toFixed(2)\n          const stockAmount = Object.entries(stockData)[i][1]\n          let stockColor = ''\n\n          portfolioPrice += parseFloat(totalPrice)\n\n          if (latestPrice > openPrice) {\n            stockColor = 'greenText'\n          } else if (latestPrice < openPrice) {\n            stockColor = 'redText'\n          } else {\n            stockColor = 'greyText'\n          }\n\n          stockReducerData[i] = {symbol: stockSymbol, totalPrice: totalPrice, amount: stockAmount, stockTextColor: stockColor}\n\n        }\n        dispatch(fillPortfolioStocks({portfolioStocks: stockReducerData, portfolioPrice: (Math.round(portfolioPrice*100)/100).toFixed(2)}))\n      })\n  }\n}\n\nexport const loginUser = data => ({\n  type: 'LOGIN_USER',\n  payload: data\n})\n\nexport const fillPortfolioStocks = data => ({\n  type: 'FILL_PORTFOLIO_STOCKS',\n  payload: data\n})\n\nexport const addStockToUser = data => ({\n  type: 'ADD_STOCK_TO_USER',\n  payload: data\n})\n\nexport const handleScreenSwitch = data => ({\n  type:'HANDLE_SCREEN_SWITCH',\n  payload: data\n})\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {userCreateFetch,userLoginFetch} from '../actions/actions.js';\n\nclass AccountScreen extends React.PureComponent {\n  state = {\n    username: '',\n    email: '',\n    password: '',\n    currAccView: 'loginAcc'\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    const buttonValue = document.getElementById('formButtonView').value\n    let data = {}\n    if (buttonValue === 'Register an account') {\n      data = {\n        email: this.state.email,\n        password: this.state.password\n      }\n      this.props.userLoginFetch(data)\n    } else {\n      data = {\n        username: this.state.username,\n        email: this.state.email,\n        password: this.state.password\n      }\n      this.props.userCreateFetch(data)\n    }\n  }\n\n  handleClick = () => {\n    if (this.state.currAccView === 'createAcc'){\n      this.setState({\n        currAccView: 'loginAcc'\n      })\n    } else {\n      this.setState({\n        currAccView: 'createAcc'\n      })\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"centerColumn centerScreen accountBorder\">\n        {this.state.currAccView === 'createAcc' ?\n        <p>Register</p>\n        :\n        <p>Login</p>}\n        <form className=\"centerColumn\" id='accountForm' onSubmit={this.handleSubmit}>\n        {this.state.currAccView === 'createAcc' ?\n        <div>\n          <label>Username: </label>\n          <input type='text' name='username' placeholder='Username' onChange={this.handleChange} />\n        </div>\n        :\n        null}\n        <div>\n          <label>Email: </label>\n          <input type='email' name='email' placeholder='Email' onChange={this.handleChange} />\n        </div>\n        <div>\n          <label>Password: </label>\n          <input type='password' name='password' placeholder='Password' onChange={this.handleChange} />\n        </div>\n        <div>\n          <input type='submit' name='submit' value='Submit' />\n          <input type='button' name='button' value={this.state.currAccView === 'createAcc' ? 'I have an account' : 'Register an account'} id='formButtonView' onClick={this.handleClick}/>\n        </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  userCreateFetch: data => dispatch(userCreateFetch(data)),\n  userLoginFetch: data => dispatch(userLoginFetch(data))\n})\n\nexport default connect(null,mapDispatchToProps)(AccountScreen);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {getStockFetch,getStockBatchFetch} from '../actions/actions.js';\n\nclass PortfolioScreen extends React.PureComponent {\n\n  componentDidMount = () => {\n    if (this.props.currentUser.stocks.length > 0) {\n      this.props.getStockBatchFetch(this.props.currentUser.stocks)\n      this.startStockInterval()\n    }\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if (prevProps.currentUser.stocks.length > 0 && this.stockInterval === undefined) {\n      this.startStockInterval()\n    }\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.stockInterval)\n  }\n\n\n  state = {\n    symbolSearch: '',\n    symbolAmount: 0\n  }\n\n  startStockInterval = () => {\n    return this.stockInterval = setInterval(() => this.props.getStockBatchFetch(this.props.currentUser.stocks), 180000)\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    if(this.state.symbolAmount === 0 || this.state.symbolAmount <= 0) {\n      alert(\"Must have a quantity more then zero.\")\n    } else {\n      const data = {...this.state}\n\n      this.props.getStockFetch(data)\n    }\n  }\n\n  renderPortfolio = (portfolioStocks) => {\n    return Object.values(portfolioStocks).map((item,idx) => {\n      return <tr key={idx}>\n               <td><span className={item.stockTextColor}>{item.symbol}</span> - {item.amount} Shares</td>\n               <td className={item.stockTextColor}>${item.totalPrice}</td>\n             </tr>\n    })\n  }\n\n\n  render(){\n    return(\n      <div className=\"centerRowTable\">\n        <div className=\"centerColumn tableAlignLeft\">\n          {this.props.currentUser.stocks.length === 0 ?\n            <p>No stocks in portfolio.</p>\n          :\n          <div>\n            <table>\n              <thead>Portfolio (${this.props.portfolioPrice})</thead>\n              <tbody>\n                {Object.keys(this.props.portfolioStocks).length === 0 ? null : this.renderPortfolio(this.props.portfolioStocks)}\n              </tbody>\n            </table>\n          </div>}\n        </div>\n        <div className=\"centerColumn formAlignCenter\">\n          <p>Cash: ${this.props.currentUser.money_amount.toFixed(2)}</p>\n          <form onSubmit={this.handleSubmit}>\n            <div>\n              <label>Ticker: </label>\n              <input type='text' name='symbolSearch' placeholder='Ticker' onChange={this.handleChange} />\n            </div>\n            <div>\n              <label>Qty: </label>\n              <input type='number' name='symbolAmount' placeholder='Qty' onChange={this.handleChange} />\n            </div>\n            <input type='submit' name='submit' value='Buy' />\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.currentUser,\n  portfolioStocks: state.portfolioStocks,\n  portfolioPrice: state.portfolioPrice\n})\n\nconst mapDispatchToProps = dispatch => ({\n  getStockFetch: data => dispatch(getStockFetch(data)),\n  getStockBatchFetch: data => dispatch(getStockBatchFetch(data))\n})\n\nexport default connect(mapStateToProps,mapDispatchToProps)(PortfolioScreen);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nclass TransactionScreen extends React.PureComponent {\n\n  render(){\n    return(\n      <div className=\"centerColumn tableAlignLeft\">\n        {this.props.currentUser.stocks.length === 0 ?\n          <p>No transaction history.</p>\n        :\n        <table>\n        <thead>Transactions</thead>\n          <tbody>\n            {this.props.currentUser.stocks.map((item,idx) => {\n              return <tr key={idx}>\n                       <td>BUY ({item.symbol}) - {item.amount} Shares @ ${item.price}</td>\n                     </tr>\n            })}\n          </tbody>\n        </table>}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.currentUser\n})\n\nexport default connect(mapStateToProps,null)(TransactionScreen);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport AccountScreen from '../components/accountScreen.js';\nimport PortfolioScreen from '../components/portfolioScreen.js';\nimport TransactionScreen from '../components/transactionScreen.js';\n\nclass BodyBox extends Component {\n  render(){\n    switch (this.props.bodyView) {\n      case \"portfolio\":\n        return <PortfolioScreen />\n      case \"transactions\":\n        return <TransactionScreen />\n      default:\n        return <AccountScreen />\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  bodyView: state.bodyView\n})\n\nexport default connect(mapStateToProps,null)(BodyBox)\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {handleScreenSwitch} from '../actions/actions.js';\n\nclass NavButtons extends React.PureComponent {\n\n  handleClick = event => {\n    if (event.target.name === 'portfolio' && event.target.name !== this.props.bodyView) {\n      this.props.handleScreenSwitch('portfolio')\n    } else if (event.target.name === 'transactions' && event.target.name !== this.props.bodyView) {\n      this.props.handleScreenSwitch('transactions')\n    }\n  }\n\n  render(){\n    return(\n      <div className=\"navBarButtons\">\n        <button type='button' name='portfolio' onClick={this.handleClick}>Portfolio</button>\n        <button type='button' name='transactions' onClick={this.handleClick}>Transactions</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  bodyView: state.bodyView\n})\n\nconst mapDispatchToProps = dispatch => ({\n  handleScreenSwitch: data => dispatch(handleScreenSwitch(data))\n})\n\nexport default connect(mapStateToProps,mapDispatchToProps)(NavButtons);\n","import React, {Component} from 'react';\nimport NavButtons from '../components/navButtons.js';\n\nclass NavBox extends Component {\n\n  render(){\n    return(\n      <NavButtons />\n    )\n  }\n}\n\nexport default (NavBox);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport BodyBox from './containers/bodyBox.js';\nimport NavBox from './containers/navBox.js';\n\nclass App extends Component {\n  render(){\n    return (\n      <div>\n        {Object.keys(this.props.currentUser).length === 0 ? null : <NavBox />}\n        <BodyBox />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentUser: state.currentUser\n})\n\nexport default connect(mapStateToProps,null)(App);\n","const initialState = {\n  currentUser: {},\n  bodyView: 'default',\n  portfolioStocks: {},\n  portfolioPrice: 0\n}\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n      case 'LOGIN_USER':\n        return {...state, currentUser: action.payload, bodyView: 'portfolio'}\n      case 'FILL_PORTFOLIO_STOCKS':\n        return {...state, ...action.payload}\n      case 'ADD_STOCK_TO_USER':\n        return {...state,\n                currentUser: {\n                  ...state.currentUser,\n                  money_amount: action.payload.newUserMoneyAmount,\n                  stocks: [\n                    ...state.currentUser.stocks,\n                    action.payload.newStock\n                  ]\n                }}\n      case 'HANDLE_SCREEN_SWITCH':\n          return {...state, bodyView: action.payload}\n      default:\n        return state;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reducer from './reducers/reducer';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducer, compose(\n        applyMiddleware(thunk)\n    ));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}